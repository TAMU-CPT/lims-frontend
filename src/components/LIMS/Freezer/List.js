/* eslint-disable no-unused-vars */
import React from 'react';
import FlatButton from 'material-ui/FlatButton';
import RaisedButton from 'material-ui/RaisedButton';
import FontIcon from 'material-ui/FontIcon';
import {Link} from 'react-router'
import FloatingActionButton from 'material-ui/FloatingActionButton';
import {ServerUrl} from '../../../../conf.json';
import ContentAdd from 'material-ui/svg-icons/content/add';
import Dialog from 'material-ui/Dialog';
import TextField from 'material-ui/TextField';
import {Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from 'material-ui/Table';
import {ParseJSON, CheckStatus} from '../../Util/Api';
/* eslint-enable no-unused-vars */


var FreezerCreationDialog = React.createClass({
	getInitialState() {
		return {
			open: false,
			location: "",
			name: "",
		};
	},

	handleOpen() {
		this.setState({open: true});
	},

	handleClose() {
		this.setState({open: false});
	},

	handleLocationChange: function(e) {
		this.setState({location: e.target.value});
	},

	handleNameChange: function(e){
		this.setState({name: e.target.value});
	},

	handleCreate: function(e){
		// Prevent normal form submission
		var name = this.state.name.trim();
		var location = this.state.location.trim();
		if (!name || !location) {
			return;
		}
		this.props.onFreezerCreation({
			name: name,
			location: location,
			box_set: [],
			container_type: "Freezer",
		});

		this.handleClear();
		this.handleClose();
	},

	handleClear() {
		this.setState({
			name: "",
			location: "",
		})
	},

	render() {
		const actions = [
			<FlatButton
				label="Clear"
				secondary={true}
				onTouchTap={this.handleClear}
			/>,
			<FlatButton
				label="Cancel"
				primary={true}
				onTouchTap={this.handleClose}
			/>,
			<RaisedButton
				label="Create"
				primary={true}
				onTouchTap={this.handleCreate}
			/>,
		];

		return (
			<span style={{marginLeft: '1em'}}>
				<FloatingActionButton mini={true} onTouchTap={this.handleOpen}>
					<ContentAdd />
				</FloatingActionButton>
				<Dialog
					title="Register a New Freezer"
					actions={actions}
					modal={false}
					open={this.state.open}
					onRequestClose={this.handleClose}
				>
					This will register a new freezer with the CPT LIMS System. Freezer contain boxes.
					<TextField
						floatingLabelText="Name"
						onChange={this.handleNameChange}
						value={this.state.name}
						/>
					<br />
					<TextField
						floatingLabelText="Location"
						onChange={this.handleLocationChange}
						value={this.state.location}
						/>
				</Dialog>
			</span>
		);
	}
});

var FreezerList = React.createClass({
	getInitialState() {
		return {
			data: []
		};
	},

	loadDataFromServer() {
		fetch(ServerUrl + '/api/web/storagelocation/')
			.then(function(response) {
				return response.json();
			}).then(function(json) {
				this.setState({
					data: json
				});
			}.bind(this)).catch(function(ex) {
				console.log('parsing failed', ex);
			});
	},

	handleCreateSubmit(freezer) {
		var freezers = this.state.data;
		// Optimistically set an id on the new comment. It will be replaced by an
		// id generated by the server. In a production application you would likely
		// not use Date.now() for this and would have a more robust system in place.
		freezer.optimistic = true;
		var newFreezers = freezers.concat([freezer]);
		this.setState({data: newFreezers});

		fetch(ServerUrl + '/api/web/storagelocation/', {
			method: 'POST',
			headers: {
				'Accept': 'application/json',
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(freezer),
		})
			.then(CheckStatus)
			.then(ParseJSON)
			.then(function(json) {
				var realFreezers = this.state.data.map(function(freezer){
					// Replace the optimistic one with the json returned
					// in the function
					if(freezer.optimistic){
						return json
					} else {
						return freezer
					}
				});

				this.setState({data: realFreezers})
			}.bind(this)).catch(function(ex) {
				console.log('parsing failed', ex);
				// TODO: sentry
			}.bind(this));
	},

	componentDidMount() {
		this.loadDataFromServer();
	},

	render() {
		var rows = this.state.data.map(function(item, index){
			return (
				<TableRow key={`storage${index}`}>
					<TableRowColumn>
						<Link to={`/lims/storage/${item.id}/`}>
							{item.name}
						</Link>
					</TableRowColumn>
					<TableRowColumn>{item.location}</TableRowColumn>
					<TableRowColumn>{item.container_type}</TableRowColumn>
					<TableRowColumn>{item.box_set.length}</TableRowColumn>
				</TableRow>
			)
		});

		return (
			<Table selectable={false}>
				<TableHeader enableSelectAll={false} displaySelectAll={false} adjustForCheckbox={false}>
					<TableRow>
						<TableHeaderColumn colSpan="4">
							<h2>
								Freezers
								<FreezerCreationDialog onFreezerCreation={this.handleCreateSubmit}/>
							</h2>
						</TableHeaderColumn>
					</TableRow>
					<TableRow>
						<TableHeaderColumn>Name</TableHeaderColumn>
						<TableHeaderColumn>Location</TableHeaderColumn>
						<TableHeaderColumn>Type</TableHeaderColumn>
						<TableHeaderColumn># of Boxes</TableHeaderColumn>
					</TableRow>
				</TableHeader>
				<TableBody displayRowCheckbox={false}>
					{rows}
				</TableBody>
			</Table>
		);
	}
});

export default FreezerList;
